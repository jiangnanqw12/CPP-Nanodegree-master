Add New Neighbors
Before you will be able to finish writing the AStarSearch method,
you will need a way to add new nodes to the search.In this exercise,
you will will write a RoutePlanner::AddNeighbors method for this purpose.

=>剛才做了一個 getNextNode, 要從 open_node_list  找出f-value  最小的
,但我們其實還沒有方法可放node 進去 open_node_list, 這邊要做,
且之前在重建 final path 時, 需要 node.parent 來回朔, 也都還沒assign parent,
這邊一起做, 當你選定你的neighbor 時, 你(cur node)就是那些neighbor 的 parent


This method will take each neighbor of the current node in the A* search,
set the neighbor's g-value, h-value, and parent, and add the neighbor to the open list.
To do this, you will use the RouteModel::Node::FindNeighbors(), and the CalculateHValue
method that you have written previously.

To complete this exercise:
1.Modify route_planner.h to include a private method declaration
    for the AddNeighbors method. This method should accept a pointer
    to a RouteModel::Node object as the argument, and since the method
    is just modifying the RoutePlanner instance variable open_list,
    the method can have void return type.
2.In route_planner.cpp define the AddNeighbors method using the
    FindNeighbors and CalculateHValue methods. Use the pseudocode below as a guideline:



Pseudocode:
AddNeighbors(RouteModel::Node *current_node):

1.Call FindNeighbors() on current_node to populate the current_node's neighbors vector.
2.For each neighbor in the current_node's neighbors
    a.Set the neighbors parent to the current_node.
    b.Set the neighbor's g_value to the sum of the current_node's
        g_value plus the distance from the curent_node to the neighbor.
    c.Set the neighbor's h_value using CalculateHValue
    d.Push the neighbor to the back of the open_list.
    e.Mark the neighbor as visited.


Note: This exercise does not have any tests associated with it,
but you will be completing A* search in the next exercise, and the code will be tested
with the results of AStarSearch().
